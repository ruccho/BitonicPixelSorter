
#pragma kernel BitonicSort
#pragma kernel ThresholdMask

//thread count
#define BITONIC_BLOCK_SIZE 512
#define THR_BLOCK_SIZE 1
#define MAX_WIDTH 2048
#define BITONIC_ITER MAX_WIDTH / BITONIC_BLOCK_SIZE

// source / destination
RWTexture2D<float4> dstTex;

// threshold map
Texture2D<float4> thrTex;

//parameters
cbuffer CB
{
    // bitonic sort parameters
	uint _Level;
	uint _LevelMax;
	
	// texture size
	uint _Width;
	uint _Height;
	
	// threshold (used only by ThresholdMask kernel)
	float _ThresholdMin;
	float _ThresholdMax;
};

// buffer to store and sync pixels on each line
// max width of input testure is 2048
groupshared float4 shared_data[MAX_WIDTH];

// calculate brightness
float br(float4 col)
{
	return (0.298912 * col.r + 0.586611 * col.g + 0.114478 * col.b);//max(col.r, max(col.g, col.b));//
}

//sorting kernel
[numthreads(BITONIC_BLOCK_SIZE,1,1)]
void BitonicSort (uint3 Gid  : SV_GroupID, 
				 uint3 DTid : SV_DispatchThreadID, 
				 uint3 GTid : SV_GroupThreadID, 
				 uint  GI   : SV_GroupIndex)
{
    uint width = _Width;
    uint levelMax = _LevelMax;
    
	// number of pixels to process per thread
	uint iter = width / BITONIC_BLOCK_SIZE + 1;
	
	// the coordinate to access the threshold map and the source texture
	uint2 texCoord = DTid.xy;
	texCoord.x = min(width, texCoord.x);
	
	uint i = 0;
	
	// threshold map data
	float4 thr[BITONIC_ITER];
	[unroll]
	for(i = 0; i < iter; i++)
	{
	    uint x = GI + i * BITONIC_BLOCK_SIZE;
	    thr[i] = thrTex[uint2(min(width, x), DTid.y)];
	}
	
	float4 result[BITONIC_ITER];
	bool swappable[BITONIC_ITER];
	
	// store pixels on current line to the shared buffer
	for(i = 0; i < iter; i++)
	{
	    uint x = GI + i * BITONIC_BLOCK_SIZE;
	    shared_data[min(width, x)] = dstTex[uint2(min(width, x), DTid.y)];
	}
	GroupMemoryBarrierWithGroupSync();
	
    for (uint level = 2; level <= levelMax; level <<= 1)
    {
	    // sort the shared data
	    for (uint j = level >> 1; j > 0; j >>= 1)
	    {
	        [unroll]
	        for(i = 0; i < iter; i++)
	        {
                uint x = GI + i * BITONIC_BLOCK_SIZE;
                
                bool isInBound = x < width;
                
                // read threshold data
	            uint offset = thr[i].g;
	            uint rangeStarts = thr[i].g;
	            uint rangeEnds = thr[i].b;
	            uint isInRange = thr[i].r > 0.5;
	            
	            // positions to swap
	            uint a = ((x - offset) & ~j) + offset;
	            uint b = ((x - offset) | j) + offset;
	        
	            swappable[i] = isInBound && isInRange && a < width && b < width && a >= rangeStarts && a < rangeEnds && b >= rangeStarts && b < rangeEnds;
	        
	            bool ascending = (((x - offset) / level) % 2 == 1) || (level == levelMax);
	        
	            bool sel = ascending != (a == x);
	        
	            //determine swapped value
	            result[i] = (br(shared_data[min(width, a)]) <= br(shared_data[min(width, b)])) == sel ? shared_data[min(width, b)] : shared_data[min(width, a)];
	            
	        }
	        
	    	GroupMemoryBarrierWithGroupSync();
	    	
	    	//apply swapped value
	    	[unroll]
	        for(i = 0; i < iter; i++)
	        {
                uint x = GI + i * BITONIC_BLOCK_SIZE;
                
	    	    shared_data[min(width, x)] = swappable[i] ? result[i] : shared_data[min(width, x)];
	    	}
	    	GroupMemoryBarrierWithGroupSync();
	    }
	}

	// write to destination texture
	[unroll]
	for(i = 0; i < iter; i++)
	{
	    uint x = GI + i * BITONIC_BLOCK_SIZE;
	    dstTex[uint2(x, DTid.y)] = shared_data[x];
	}
}

[numthreads(1,THR_BLOCK_SIZE,1)]
void ThresholdMask (uint3 Gid  : SV_GroupID, 
				 uint3 DTid : SV_DispatchThreadID, 
				 uint3 GTid : SV_GroupThreadID, 
				 uint  GI   : SV_GroupIndex)
{
    uint width = _Width;
    float thresholdMin = _ThresholdMin;
    float thresholdMax = _ThresholdMax;
    uint y = DTid.y;
    
    bool isInRange = false;
    uint rangeStarts = 0;
    [loop]
    for (uint x = 0; x < width; x++)
    {
        uint index = y * width + x;
        
        float b = br(dstTex[uint2(x, y)]);
        bool r = b >= thresholdMin && b <= thresholdMax;
        
        bool mark = isInRange != r;
        [branch]
        if(mark)
        {
            float4 c = r ? float4(0, 1024, 1024, 0) : float4(1, rangeStarts, x, 0);
            [loop]
            for (uint xd = rangeStarts; xd < x; xd++)
            {
                dstTex[uint2(xd, y)] = c;
            }
            rangeStarts = x;
        }
        isInRange = r;
    }
    
    float4 c = isInRange ? float4(1, rangeStarts, width, 0) : float4(0, 1024, 1024, 0);
    [loop]
    for (uint xd = rangeStarts; xd < width; xd++)
    {
        dstTex[uint2(xd, y)] = c;
    }

}
